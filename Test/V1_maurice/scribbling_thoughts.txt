Day 1 - Process the chats and check for duplicates
PART 1

import required_libraries  # (like os, pandas, etc.)

Function to navigate directories and fetch chat files:
    Initialize an empty DataFrame with columns: ['Date', 'Team', 'Person', 'Chats URL', 'Chat Name', 'Chat Group Name', 'File Size', 'Expected Format']
    
    for each Date directory given:
        for each Team subdirectory in Date:
            for each Person subdirectory in Team:
                for each chat file (students.txt) in Person:
                    Extract required details:
                        Date = Date from the Date directory name
                        Team = Team from the Team subdirectory name
                        Person = Person from the Person subdirectory name
                        Chats URL = [logic to be defined later]
                        Chat Name = Name of the chat file
                        Chat Group Name = [logic to determine this from Chat Name]
                        File Size = Get size of the chat file
                        Expected Format = [to be discussed later]
                    Add extracted details to the DataFrame

    Return the populated DataFrame

Main Program:
    Call the function to navigate directories and fetch chat files
    Display the DataFrame or perform any initial analysis (if required)


PART 2

import required_libraries  # (like os, pandas, re, etc.)

Function to parse chat group name and check format:
    Input: file name (string)
    Output: chat group name (string), expected format (string)

    Remove "WhatsApp Chat with " prefix from the file name
    Check if there are any duplicates (like "(1)", "(2)" etc.) in the file name
    If duplicates exist:
        Keep the file with the highest duplicate number (max value)
        Trim the duplicate part from the file name
    Split the file name into parts (separated by space)
    Ensure there are exactly two parts:
        First part: Name or word in code
        Second part: Combination of letters and numbers
    If the file name meets these criteria:
        expected_format = "yes"
    Else:
        expected_format = "no"
    Return chat group name (without the .txt extension) and expected_format

Function to navigate directories and fetch chat data:
    Similar to previous function, but without 'Chats URL' and with the new logic for chat group name and expected format

Main Program:
    Call the function to navigate directories and fetch chat files
    Display the DataFrame or perform any initial analysis (if required)


PART 3 (actually a revised version for SALES group names)

Function to parse chat group name and check format:
    Input: file name (string), team name (string)
    Output: chat group name (string), expected format (string)

    Remove "WhatsApp Chat with " prefix and file extension from the file name
    Check for duplicates in the file name and remove them
    Split the file name into parts

    If team name is 'SALES':
        If there are exactly two parts in the file name:
            expected_format = 'yes'
        Else:
            expected_format = 'no'
    Else:
        Check for special characters in the first two parts of the file name
        If found:
            expected_format = 'no'
        Else:
            expected_format = 'yes'

    Return the chat group name and expected_format

Main Function to navigate directories and fetch chat data:
    Similar to the previous function, but call the updated parse_chat_group_name function with team name as an additional argument


PART 4 (final and refined version of table 1 code)

import required_libraries  # (like os, pandas, re, etc.)

Function to parse chat group name and check format:
    Input: file name (string), team name (string)
    Output: chat group name (string), expected format (string)

    Remove "WhatsApp Chat with " prefix and file extension from the file name
    Check for duplicates in the file name and remove them
    Split the file name into parts

    If team name is 'SALES':
        Use regex to check:
            - Pattern for 'EDOOFA' variants (EDOOFA, edoofa, Edoofa, EA) after an underscore
            - Bracketed date format like (16_11)
        If any pattern is found:
            expected_format = 'yes'
        Else:
            expected_format = 'no'
    Else:
        Check for special characters in the first two parts of the file name
        If found:
            expected_format = 'no'
        Else:
            expected_format = 'yes'

    Return the chat group name and expected_format

Function to navigate directories and fetch chat data:
    Initialize an empty DataFrame
    Walk through the directory structure (Date/Team/Person)
    For each chat file:
        Parse the chat group name and determine the expected format
        Populate the DataFrame with chat details

Main Program:
    Call the function to navigate directories and fetch chat files
    Split the DataFrame based on 'Expected Format' into 'df_king' and 'df_joker'
    'df_king' contains rows with expected_format = 'yes'
    'df_joker' contains rows with expected_format = 'no'


Day2- Parsing and identifying person or not

# Additional libraries might be needed, like datetime

Function to process chat files for a person and date:
    Input: Directory path (string), person's name (string), date (string)
    Output: DataFrame for the person and date

    Initialize a DataFrame for the person and date with 288 columns (5-min intervals)
    Read each chat file in the person's directory for the given date
    For each message in the chat file:
        Identify if the sender is the counselor or the student
        Find the corresponding 5-minute interval
        Update the DataFrame (1 for message, 0 otherwise)

    Return the populated DataFrame

Main Program:
    After executing Part 1:
    Initialize a dictionary to store DataFrames
    For each person and each date:
        Call the chat processing function
        Store the resulting DataFrame in the dictionary with a key 'person_date'

# Note: Actual implementation will depend on the structure of the directories and chat files


Day 3- generating tables in csvs for all chats parsed with actual data of 22/11/23

1. Define the function list_chat_files:
   - Takes a directory path as input.
   - Traverses the directory structure (Date/Team/Person).
   - Lists all '.txt' files within these directories.
   
2. Define the function parse_chat_file:
   - Takes a file path and expected date as input.
   - Reads the chat file line by line.
   - Uses regex to extract date, time, sender, and message from each line.
   - Converts date and time to a datetime object.
   - Checks if the sender's name is not purely numeric.
   - Returns a list of tuples (datetime, sender, is_person flag).

3. Define the function create_template_dataframe:
   - Creates a DataFrame with 1440 rows, each for a minute of the day.
   - Returns the DataFrame.

4. Define the function populate_dataframe:
   - Takes a DataFrame, parsed chat data, and a starting column index as input.
   - For each entry in the parsed data, calculates the corresponding minute of the day.
   - Updates the DataFrame, marking '1' in columns based on 'person' or 'others'.
   - Returns the updated column index.

5. Define the function process_person_chats:
   - Takes a list of chat files as input.
   - For each file, determines the corresponding DataFrame key (date_person).
   - Parses the chat file and populates the DataFrame.
   - Returns a dictionary of DataFrames keyed by date_person.

6. Main script execution:
   - Sets the root directory for chat files.
   - Calls list_chat_files to get a list of chat files.
   - Processes each chat file and generates DataFrames.
   - Saves each DataFrame as a CSV file in a specified directory.



TABLE 3

# Define the delay threshold
DELAY_THRESHOLD = 15  # minutes

# Define counselor names for each team
counselor_names = {'team1': ['name1', 'name2'], 'team2': ['name3', 'name4']}

# Function to read chat files
def read_chat_file(file_path):
    # Read and return the list of messages with timestamps and sender

# Function to calculate delays
def calculate_delays(messages, person_name):
    # Calculate and return times of significant delays

# Function to check ongoing chats
def check_ongoing_chats(date, person_name, time_of_delay):
    # Check and return ongoing chat details during the delay

# Function to extract last 7 messages (regardless of date)
def extract_last_7_messages(messages):
    # Extract and return the last 7 messages from the chat history

# Main analysis process
def main_analysis(root_directory):
    analysis_table = []  # Initialize the analysis table

    # Navigate through the folder structure
    for date_folder in os.listdir(root_directory):
        for team_folder in os.listdir(os.path.join(root_directory, date_folder)):
            for person_folder in os.listdir(os.path.join(root_directory, date_folder, team_folder)):
                # Process each chat file
                chat_file_path = os.path.join(root_directory, date_folder, team_folder, person_folder)
                messages = read_chat_file(chat_file_path)
                delays = calculate_delays(messages, person_folder)

                for delay in delays:
                    ongoing_chats = check_ongoing_chats(date_folder, person_folder, delay)
                    last_7_messages = extract_last_7_messages(messages)
                    # Populate the analysis table
                    analysis_table.append([date_folder, team_folder, person_folder, delay, ongoing_chats, last_7_messages])

    return analysis_table

# Example usage
analysis_table = main_analysis('path_to_root_directory')


Table 3- V2 
# Define the delay threshold and other constants
DELAY_THRESHOLD = 15  # minutes
LAST_DAYS = 7  # number of days to filter

# Function to filter messages from the last 7 days
def filter_last_7_days_messages(file_path):
    # ...

# Function to parse messages
def parse_messages(messages):
    # ...

# Function to identify the person and calculate delays
def calculate_delays_and_identify_person(messages):
    # ...

# Main analysis process
def main_analysis(root_directory):
    # ...
    for date_folder, team_folder, person_folder in all_folders:
        chat_file_path = os.path.join(date_folder, team_folder, person_folder)
        messages = filter_last_7_days_messages(chat_file_path)
        parsed_messages = parse_messages(messages)
        delays = calculate_delays_and_identify_person(parsed_messages)
        # ...
    # ...

# Run the analysis
delay_analysis_table = main_analysis(root_directory)
